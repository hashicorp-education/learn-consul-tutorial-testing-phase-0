# This is a basic workflow that is manually triggered

name: Manual workflow

# Controls when the action will run. Workflow runs when manually triggered.
on: 
  workflow_dispatch:
    inputs:
      CONSUL_VERSION:
        description: 'Consul version for the testing'     
        required: true
        default: 'latest'

permissions:
  contents: write # required permission to delete artifact

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "greet"
  build_and_run:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Install Prerequisites
      run: |
        sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
        wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
        gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(grep -oP '(?<=UBUNTU_CODENAME=).*' /etc/os-release || lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt update
        sudo apt-get install terraform
    - name: Build Docker Images
      run: |
        cd self-managed/infrastructure/docker/images
        ./generate_variables.sh ${{ vars.CONSUL_VERSION }}
        echo `cat variables.env | grep CONSUL_VERSION` >> $GITHUB_ENV
        ./build_images.sh
    - name: Run GS 1
      run: |
        cd self-managed/infrastructure/docker
        terraform init
        terraform destroy --auto-approve
        terraform apply --auto-approve --var-file=../../ops/conf/GS_00_base_scenario.tfvars -var="solve_scenario=true"
    - name: Run GS 2
      run: |
        cd self-managed/infrastructure/docker
        terraform init
        terraform destroy --auto-approve
        terraform apply --auto-approve --var-file=../../ops/conf/GS_01_deploy_consul.tfvars -var="solve_scenario=true"
    # - name: Create Release
    #   run: |
    #     echo "Create release here"
    #     ls -l runbooks
    # - name: Create Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ env.CONSUL_VERSION }}
    #     release_name: Release ${{ env.CONSUL_VERSION }}
    #     draft: false
    #     prerelease: false
    
    # - name: Upload Release Asset
    #   id: upload-release-asset 
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
    #     asset_path: ./runbooks/self_managed-docker-GS_01_deploy_consul_on_vms-runbook.md
    #     asset_name: GS_01_deploy_consul_on_vms-runbook.md
    #     asset_content_type: text/markdown
    - name: Release and publish
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./runbooks/self_managed-docker*
        tag: ${{ env.CONSUL_VERSION }}
        overwrite: true
        file_glob: true
        body: "Automated release for Consul ${{ env.CONSUL_VERSION }}"