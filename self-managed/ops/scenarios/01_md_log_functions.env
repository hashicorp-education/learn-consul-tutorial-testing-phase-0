#!/usr/bin/env bash

# ++-----------
# ||   00 - Global Functions
# ++------

## Variables and functions in this file are needed for the solve_scenario and 
## validate_scenario scripts and will be included in the preparations of the 
## respective runbooks. Thid file is also included in the provision script in 
## case solve_scenario = true

# ++-----------------+
# || Variables       |
# ++-----------------+

# ## 0 - TRACE & Commands
# ## 1 - DEBUG
# ## 2 - INFO
# ## 3 - WARN
# ## 4 - ERR
# LOG_LEVEL=${LOG_LEVEL:-2}

# # ## Overwrites log level
# LOG_LEVEL=0

# ## Timestamp
# TSTAMP_MARKER="/tmp/tstamp.$$"
# touch -t `date '+%Y%m%d%H%M.%S'` ${TSTAMP_MARKER}

# ## Header Counters
# ## Resets header counter at the start of execution.
# H1=0
# H2=0
# H3=0

# ## The functions require that the output file is defined and created.
# [ -z "$MD_RUNBOOK_FILE" ]     && _log_err "Mandatory parameter: MD_RUNBOOK_FILE not set."      && exit 1

# if [[ -f "${MD_RUNBOOK_FILE}" ]] && [[ -s "${ASSETS}scenario/env-$i.env" ]] ;  then
#         log "Found ${ASSETS}scenario/env-$i.env"
#         source "${ASSETS}scenario/env-$i.env"
#     fi

MD_RUNBOOK_FILE="/tmp/runbook.md.$$"

# ++-----------------+
# || Functions       |
# ++-----------------+

# ++---------------------------------------------------------------------------+
# || Logging on markdown file                                                                   |
# ++---------------------------------------------------------------------------+

## Logs a text into a file
md_log(){

  local _inline=false

  while [ $# -gt 0 ]
  do
    case "$1" in
    (-i) _inline=true; shift;;
    (*)  break;;
    esac
  done

  echo "${@}" >> "${MD_RUNBOOK_FILE}"

  if [ ! "${_inline}" == true ]; then
    echo "" >> "${MD_RUNBOOK_FILE}"
  fi

}

## Logs headers
## When logging headers the header is also 
## printed to stdout to simplify flow readability
md_h1(){

  header1 "${@}"
  md_log "# ${@}"

}

md_h2(){

  header2 "${@}"
  md_log "## ${@}"

}

md_h3(){

  header3 "${@}"
  md_log "### ${@}"

}

## Logs a command in markdon syntax.
md_log_cmd(){

  # PARAMS:
  # -s <syntax> - syntax to assign to markdown code block
  # -p          - prompt. Defaults to true, if set, will not print prompt in fornt of command

  local _prompt='$ '
  local _syntax=''

  while [ $# -gt 0 ]
  do
    case "$1" in
    (-s) _syntax=$2; shift; shift;;
    (-p) _prompt=''; shift;;
    (--) shift; break;;
    (-*) echo "$0: error - unrecognized option $1" 1>&2; exit 1;;
    (*)  break;;
    esac
  done

  local _command="${@}"

  md_log -en '```'"${_syntax}" #'\n'""
  md_log -i "${_prompt}${_command}"
  md_log -e '```'

}

## Runs command on local node and logs the output in markdon syntax.
_RUN_CMD(){

  # PARAMS:
  # -s <syntax>   - syntax for the code block. Defaults to shell-session. 
  # -o <syntax>   - syntax for the output code block.
  # -h            - do not print output even if present.
  local _syntax="shell-session"
  local _o_syntax="plaintext"
  # local _foe=false
  local _silent=false
  local _run_remote=false
  local _remote_host=""
  local _concat_output=false
  local _bypass_options=""
  local _environment=""

  ## Check parameters
  while [ $# -gt 0 ]
  do
    case "$1" in
    (-s) _syntax=$2; shift; shift;;
    (-o) _o_syntax=$2; shift; shift;;
    (-c) _concat_output=true; shift;;
    (-h) _silent=true; shift;;
    (-r) _run_remote=true; _remote_host=$2;  shift; shift;;
    (-e) _environment=$2; shift; shift;;
    (-b) _bypass_options="true"; shift;; 
    (--) shift; break;;
    (-*) echo "$0: error - unrecognized option $1" 1>&2; exit 1;;
    (*)  break;;
    esac
  done

  ## Define command
  local _CMD="${@}"

  local _PRE_CMD=""

  ## Environment is a list of comma seoparated variables that are exported before running the command
  if [ ! -z "${_environment}" ]; then
    for i in $(echo ${_environment} | tr ";" " "); do

       _PRE_CMD=${_PRE_CMD}"export $i=${!i}; "

    done

    log_warn "Exporting ENV: ${_environment}"
    log_trace "${_PRE_CMD}"
  fi

  ## Log command on MD file and stdout
  log_trace -t "[COMM]" -f "${_CMD}"

  ## Prints rthe command on the markdown file without running it.
  # md_log_cmd -s ${_syntax} "${_CMD}"

  ## Create local variable for the command output
  local _OUTPUT=""
  
  # Checks if the command needs to be executed on a remote host.
  if [ ! "${_run_remote}" == true ]; then
    
    if [ ! "${_bypass_options}" == true ]; then

      # Local exec
      _OUTPUT=$(eval "${_PRE_CMD}${_CMD}" 2>&1)

      ## Record command exit status
      local _STAT="$?"
    else
      ## When bypass option is set the otput is not collected.
      ## This is an escape hatch for commands that are not compatible with this function
      remote_exec -o ${_remote_host} "${_PRE_CMD}${_CMD}"
    fi
  
  else

    # Remote exec
    _OUTPUT=`remote_exec ${_remote_host} "${_PRE_CMD}${_CMD}"`

    ## Record command exit status
    local _STAT="$?"

  fi
  
  ## Checks if the output needs to be printed
  if [ "${_silent}" == true ]; then
    # Output printing suppressed with the -h parameter
    # This overrides other output options

    # Print command
    md_log_cmd -s ${_syntax} "${_CMD}"
    log_warn "Suppressed an output of `echo -e \"${_OUTPUT}\" | wc -l` lines."

  else
    ## Output printing enabled

    ## Checks if the command produced output
    if [ ! -z "${_OUTPUT}" ]; then
      ## The commmand generated some output
      
      if [ "${_concat_output}" == true ]; then
        ## If -c is selected the output is added to the same codeblock of the command

        ## Prints the command and the ouptup together
        md_log_cmd -s ${_syntax} "${_CMD} 
${_OUTPUT}"

      else
        ## Command and output will be printed in two different code blocks

        # Print command
        md_log_cmd -s ${_syntax} "${_CMD}"

        # Print output
        md_log "The output is similar to the following:"
        md_log_cmd -s "${_o_syntax}" -p "${_OUTPUT}"      
      fi

    else
      ## The command generated no output
      # Print command
      md_log_cmd -s ${_syntax} "${_CMD}"

      ## The commmand generated no output
      md_log "That will produce no output."
    fi
  fi

  if [ "${_STAT}" -ne 0 ];  then
    log_warn "Conmmand failed."
    return 1
  else
    log_ok "Conmmand succeeded."
    return 0
  fi

}

_CONNECT_TO() {

  local _remote_host=$1

  md_log 'Log into `'${_remote_host}'` from the bastion host.'

  md_log_cmd -s shell-session 'ssh -i certs/id_rsa '${_remote_host}'
##..
'${username}'@'${_remote_host}:~$''

}

_EXIT_FROM() {
  
  local _remote_host=$1

  md_log 'Exit the SSH session to return to the bastion host.'

  md_log_cmd -s shell-session 'exit
logout
Connection to '${_remote_host}' closed.
'${username}'@bastion:~$'
  
}


_RUN_CMD_REMOTE() {
  return 0

}


